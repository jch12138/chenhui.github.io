<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://baldstudio.cn</id>
    <title>博德工作室</title>
    <updated>2020-04-23T13:24:57.167Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://baldstudio.cn"/>
    <link rel="self" href="https://baldstudio.cn/atom.xml"/>
    <subtitle>Keep Foolish, Keep Hungry</subtitle>
    <logo>https://baldstudio.cn/images/avatar.png</logo>
    <icon>https://baldstudio.cn/favicon.ico</icon>
    <rights>All rights reserved 2020, 博德工作室</rights>
    <entry>
        <title type="html"><![CDATA[RT-Thread学习笔记（一）]]></title>
        <id>https://baldstudio.cn/post/rt-thread-xue-xi-bi-ji-yi/</id>
        <link href="https://baldstudio.cn/post/rt-thread-xue-xi-bi-ji-yi/">
        </link>
        <updated>2020-04-23T13:21:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>作者: 黄震</strong><br>
本笔记内容基于RT-Thread官方<a href="https://www.rt-thread.org/document/site/">文档中心</a></p>
<h2 id="什么是rt-thread">什么是RT-Thread</h2>
<ol>
<li>概述<br>
一款完全由国内团队开发维护的嵌入式实时操作系统（RTOS）。正演变成一个功能强大、组件丰富的物联网操作系统</li>
<li>架构<br>
自下而上为
<ul>
<li>内核层： RT-Thread 的核心部分，包括了内核系统中对象的实现，例如多线程及其调度、信号量、邮箱、消息队列、内存管理、定时器等</li>
<li>组件与服务层：组件是基于 RT-Thread 内核之上的上层软件，例如虚拟文件系统、FinSH 命令行界面、网络框架、设备框架等</li>
<li>RT-Thread软件包：运行于 RT-Thread 物联网操作系统平台上，面向不同应用领域的通用软件组件，由描述信息、源代码或库文件组成</li>
</ul>
</li>
<li>特点
<ol>
<li>采用 C 语言编写，浅显易懂，方便移植</li>
<li>Nano版本专门针对低性能系统</li>
<li>对比Linux体积小，成本低，功耗低</li>
<li>有丰富的软件包依赖</li>
</ol>
</li>
</ol>
<h2 id="rt-thread-nano">RT-Thread Nano</h2>
<pre><code>一个极简版的硬实时内核，功能包括任务处理、软件定时器、信号量、邮箱和实时调度等相对完整的实时操作系统特性。适用于各种32位ARM入门级MCU场合。
有下载简单，代码简单，移植简单的特点。
</code></pre>
<h2 id="内核基础">内核基础</h2>
<pre><code>与硬件密切相关的，实现操作系统基础的功能的程序
</code></pre>
<ol>
<li>
<p>内核功能</p>
<ul>
<li>线程调度</li>
<li>时钟管理</li>
<li>线程间同步</li>
<li>线程间通信</li>
<li>内存管理</li>
<li>I/O设备管理</li>
</ul>
</li>
<li>
<p>RT-Thread 启动流程<br>
由系统启动文件开始进入RT-Thread启动文件rtthread_startup()后进入用户的main()函数<br>
<a href="https://www.rt-thread.org/document/site/programming-manual/basic/basic/#rt-thread_1">官方文档</a></p>
</li>
<li>
<p>自动化初始机制<br>
自动初始化机制是指初始化函数不需要被显式调用，只需要在函数定义处通过宏定义的方式进行申明，就会在系统启动过程中被执行<br>
个人理解就是将一系列初始化函数集成在一个大的函数表中，系统开始时自动遍历表中函数并运行</p>
<p><a href="https://www.rt-thread.org/document/site/programming-manual/basic/basic/#rt-thread_3">官方文档</a></p>
</li>
<li>
<p>内核对象管理</p>
<p>具体内核对象结构体参考等<a href="https://www.rt-thread.org/document/site/programming-manual/basic/basic/#rt-thread_3">官方文档</a></p>
<ul>
<li>所有内核对象分为静态对象与动态对象，动态对象参数多为指针，命名由_t结尾</li>
<li>常见对象有线程，信号量，互斥量，定时器等</li>
</ul>
</li>
<li>
<p>内核配置</p>
<p>通过修改工程目录下的 rtconfig.h实现</p>
<p>具体配置见<a href="https://www.rt-thread.org/document/site/programming-manual/basic/basic/#rt-thread_5">官方文档</a></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[嵌入式系统]mini2440课程实验]]></title>
        <id>https://baldstudio.cn/post/qian-ru-shi-xi-tong-mini2440-ke-cheng-shi-yan/</id>
        <link href="https://baldstudio.cn/post/qian-ru-shi-xi-tong-mini2440-ke-cheng-shi-yan/">
        </link>
        <updated>2020-04-23T10:54:13.000Z</updated>
        <content type="html"><![CDATA[<p><strong>作者: 蒋晨辉</strong></p>
<h2 id="实验一-开发板学习和程序下载">实验一 开发板学习和程序下载.</h2>
<p>指导书中推荐的开发环境是ADS,由于本人习惯使用KEIL,所以将原工程移植到了keil,主要是修改了启动文件中一些编译器相关的宏定义.一些是ads中独有的,keil下编译会报错.<br>
<img src="https://baldstudio.cn/post-images/1587639557783.png" alt="搭建好的开发环境" loading="lazy"><br>
开发的大致步骤是</p>
<ol>
<li>在vscode中编辑代码.</li>
<li>使用keil编译出二进制文件.</li>
<li>使用minitool下载到2440开发板中</li>
</ol>
<h2 id="实验二-led跑马灯实验">实验二 LED跑马灯实验</h2>
<h3 id="基本要求">基本要求</h3>
<p><strong>实现LED灯闪烁</strong></p>
<pre><code class="language-c">void dely(U32 tt)
{
    U32 i;
    for (; tt &gt; 0; tt--)
    {
        for (i = 0; i &lt; 10000; i++)
        {
        }
    }
}

void LED_Test(void)
{
    U32 data;
    rGPBCON = 0x155555;
    data = 0x06;
    while(1)
    {
        rGPBDAT = (data&lt;&lt;5);
        dely(5000);
        data =~data;
    }
}
</code></pre>
<h3 id="思考题">思考题</h3>
<p><strong>如何实现四个LED灯轮流点亮</strong><br>
只需依次将对应引脚电平拉低即可</p>
<pre><code class="language-c">void LED_Test(void)
{
    U32 data;
    rGPBCON = 0x15400; /*PB5~PB8 设置为输出*/
    data = 0x01;
    while (1)
    {
        rGPBDAT = ~(data &lt;&lt; 5);
        dely(5000);
        rGPBDAT = ~(data &lt;&lt; 6);
        dely(5000);
        rGPBDAT = ~(data &lt;&lt; 7);
        dely(5000);
        rGPBDAT = ~(data &lt;&lt; 8);
        dely(5000);
    }
}
</code></pre>
<h3 id="实验效果">实验效果</h3>
<figure data-type="image" tabindex="1"><img src="https://baldstudio.cn/post-images/1587646055419.gif" alt="" loading="lazy"></figure>
<h2 id="实验三-中断控制">实验三 中断控制</h2>
<h3 id="基本目标">基本目标</h3>
<p><strong>按下任意按键都可以使LED开始闪烁</strong></p>
<pre><code class="language-c">void eint_init(void)
{
    rGPGCON = rGPGCON &amp; (~((3 &lt;&lt; 22) | (3 &lt;&lt; 6) | (3 &lt;&lt; 0) |
(3 &lt;&lt; 10) | (3 &lt;&lt; 12) | (3 &lt;&lt; 14))) | ((2 &lt;&lt; 22) | (2 &lt;&lt; 6) | (2 &lt;&lt; 0) |
 (2 &lt;&lt; 10) | (2 &lt;&lt; 12) | (2 &lt;&lt; 14)); //GPG config as EINT

	/* 低电平触发 */
    rEXTINT1 &amp;= ~(7|(7&lt;&lt;0));
    rEXTINT1 |= (0|(0&lt;&lt;0));//set eint8 low level int
    rEXTINT1 &amp;= ~(7&lt;&lt;12);
    rEXTINT1 |= (0&lt;&lt;12); //set eint11 low level int
    rEXTINT1 &amp;= ~(7&lt;&lt;20);
    rEXTINT1 |= (0&lt;&lt;20); //set eint13 low level int
    rEXTINT1 &amp;= ~(7&lt;&lt;24);
    rEXTINT1 |= (0&lt;&lt;24); //set eint14 low level int
    rEXTINT1 &amp;= ~(7&lt;&lt;28);
    rEXTINT1 |= (0&lt;&lt;28); //set eint15 low level int
    rEXTINT2 &amp;= ~(0xf&lt;&lt;12);
    rEXTINT2 |= (0&lt;&lt;12); //set eint19 low level int

    rEINTPEND |= (1 &lt;&lt; 8) | (1 &lt;&lt; 11) | (1 &lt;&lt; 13) | 
    (1 &lt;&lt; 14) | (1 &lt;&lt; 15) | (1 &lt;&lt; 19); //clear eint pending
    rEINTMASK &amp;= ~((1 &lt;&lt; 8) | (1 &lt;&lt; 11) | (1 &lt;&lt; 13) |
     (1 &lt;&lt; 14) | (1 &lt;&lt; 15) | (1 &lt;&lt; 19));
    //enable eint
    ClearPending(BIT_EINT8_23); //SRCPND INTPND
    pISR_EINT8_23 = (U32)key_handler;
    EnableIrq(BIT_EINT8_23); //INTMSK
}
void eint_test(void)
{
    rGPBCON = 0x155555;
    eint_init();
}
static void __irq key_handler(void)
{
    U32 data;
    data = 0x06;
    if(rINTPND==BIT_EINT8_23) {
        ClearPending(BIT_EINT8_23);
        if(rEINTPEND&amp;(1&lt;&lt;8)) rEINTPEND |= 1&lt;&lt; 8;
        if(rEINTPEND&amp;(1&lt;&lt;11)) rEINTPEND |= 1&lt;&lt; 11;
        if(rEINTPEND&amp;(1&lt;&lt;13)) rEINTPEND |= 1&lt;&lt; 13;
        if(rEINTPEND&amp;(1&lt;&lt;14)) rEINTPEND |= 1&lt;&lt; 14;
        if(rEINTPEND&amp;(1&lt;&lt;15)) rEINTPEND |= 1&lt;&lt; 15;
        if(rEINTPEND&amp;(1&lt;&lt;19)) rEINTPEND |= 1&lt;&lt; 19;
    }
    while(1)
    {
        rGPBDAT = (data&lt;&lt;5);
        dely(10000);
        data =~data;
    }
}
</code></pre>
<h3 id="思考题-2">思考题</h3>
<p><strong>1.如果修改为上升沿触发按键中断，会有何实验现象？</strong><br>
理论上说,改为上升沿触发,当松开按键时才会触发中断,使LED灯开始闪烁.然而我实际测试的时候,总是在按下按键的时候就触发了.通过在中断函数中打印日志发现,按键抖动非常严重,按下一次按键能触发三四次中断.所以实际效果并不好.</p>
<pre><code class="language-c">/* 上升沿触发 */
    /* 实际效果不理想,在中断函数打印日志,发现按下一次按钮
    可以触发三四次中断,抖动太严重,顾不追求实际效果 */
    rEXTINT1 &amp;= ~(7 &lt;&lt; 0); /* 清空 */
    rEXTINT1 |= (4 &lt;&lt; 0);  //set eint8 rasing edge int
    rEXTINT1 &amp;= ~(7 &lt;&lt; 12);
    rEXTINT1 |= (4 &lt;&lt; 12); //set eint11 rasing edge int
    rEXTINT1 &amp;= ~(7 &lt;&lt; 20);
    rEXTINT1 |= (4 &lt;&lt; 20); //set eint13 rasing edge int
    rEXTINT1 &amp;= ~(7 &lt;&lt; 24);
    rEXTINT1 |= (4 &lt;&lt; 24); //set eint14 rasing edge int
    rEXTINT1 &amp;= ~(7 &lt;&lt; 28);
    rEXTINT1 |= (4 &lt;&lt; 28); //set eint15 rasing edge int
    rEXTINT2 &amp;= ~(0xf &lt;&lt; 12);
    rEXTINT2 |= (4 &lt;&lt; 12); //set eint19 rasing edge int
</code></pre>
<p><strong>2.如何实现不同按键中断有不同处理?</strong><br>
通过读取rEINTPEND中的值,可以判断是哪一个中断被触发,可以由此写出如下中断服务函数,实现按下KEY1,KEY2,KEY3 慢速闪烁,按下KEY4,KEY5,KEY6快速闪烁 .</p>
<pre><code class="language-c">static void __irq key_handler(void)
{
    U32 data;
    data = 0x06;
    int flag = 0;
    /* 按下KEY1,KEY2,KEY3 慢速闪烁,按下KEY4,KEY5,KEY6快速闪烁 */
    if (rINTPND == BIT_EINT8_23)
    {
        ClearPending(BIT_EINT8_23);
        if (rEINTPEND &amp; (1 &lt;&lt; 8))
        {
            rEINTPEND |= 1 &lt;&lt; 8;
            flag = 1;
        }
        if (rEINTPEND &amp; (1 &lt;&lt; 11))
        {
            rEINTPEND |= 1 &lt;&lt; 11;
            flag = 1;
        }
        if (rEINTPEND &amp; (1 &lt;&lt; 13))
        {
            rEINTPEND |= 1 &lt;&lt; 13;
            flag = 1;
        }
        if (rEINTPEND &amp; (1 &lt;&lt; 14))
        {
            rEINTPEND |= 1 &lt;&lt; 14;
            flag = 2;
        }
        if (rEINTPEND &amp; (1 &lt;&lt; 15))
        {
            rEINTPEND |= 1 &lt;&lt; 15;
            flag = 2;
        }
        if (rEINTPEND &amp; (1 &lt;&lt; 19))
        {
            rEINTPEND |= 1 &lt;&lt; 19;
            flag = 2;
        }
    }
    if (flag == 1)
    {
        while (1)
        {
            rGPBDAT = (data &lt;&lt; 5);
            dely(10000);
            data = ~data;
        }
    }
    if (flag == 2)
    {
        while (1)
        {
            rGPBDAT = (data &lt;&lt; 5);
            dely(1000);
            data = ~data;
        }
    }

#endif
}
</code></pre>
<h3 id="实验效果-2">实验效果</h3>
<figure data-type="image" tabindex="2"><img src="https://baldstudio.cn/post-images/1587646078909.gif" alt="" loading="lazy"></figure>
<h2 id="实验四-定时器实验">实验四 定时器实验</h2>
<h3 id="基本目标-2">基本目标</h3>
<p>编程实现测试程序运行后过 5 秒开启 LED 跑马灯</p>
<pre><code class="language-c">void timer0_init(void)
{
    /* PCLK为50M,定时器输入时钟设置为12500hz,定时器重装值
    设置为12500,可以实现1s一次的中断 */
    ClearPending(BIT_TIMER0); //SRCPND INTPND
    pISR_TIMER0 = (U32)timer0_handler;
    rTCFG0 &amp;= ~0xff;
    rTCFG0 |= 249; //prescaler = 249+1
    rTCFG1 &amp;= ~0xf;
    rTCFG1 |= 3;     //mux = 1/16
    rTCNTB0 = 12500; //定时器装载值12500
    rTCON &amp;= ~0x1f;
    rTCON |= 0x02;
    rTCON = 0x09;          //启动定时器
    EnableIrq(BIT_TIMER0); //INTMSK
}

volatile U8 timer_count = 0;

void timer0_test(void)
{
    U32 data;
    timer_count = 0;
    rGPBCON = 0x155555;
    data = 0x06;
    timer0_init();

    while(1)
    {
        /* 例程这里有错误,没有等timer_count的变化,
        应该有while循环等待timer_count到达4 */
        if (timer_count &gt;= 4)
        {
            while (1)
            {
                rGPBDAT = (data &lt;&lt; 5);
                dely(120);
                data = ~data;
            }
        }
    }
}
static void __irq timer0_handler(void)
{
    timer_count++;
    if (timer_count == 4)
        rTCON = 0; //停止定时器
    ClearPending(BIT_TIMER0); //SRCPND INTPND
}
</code></pre>
<h3 id="思考题-3">思考题</h3>
<p><strong>1、如何修改程序实现准确定时 5 秒？</strong><br>
PCLK为50M,定时器输入时钟设置为12500hz,定时器重装值设置为12500,可以实现1s一次的中断.触发5次中断就是5s.</p>
<pre><code class="language-c">void timer0_init(void)
{
    /* PCLK为50M,定时器输入时钟设置为12500hz,定时器重装值
    设置为12500,可以实现1s一次的中断 */
    ClearPending(BIT_TIMER0); //SRCPND INTPND
    pISR_TIMER0 = (U32)timer0_handler;
    rTCFG0 &amp;= ~0xff;
    rTCFG0 |= 249; //prescaler = 249+1
    rTCFG1 &amp;= ~0xf;
    rTCFG1 |= 3;     //mux = 1/16
    rTCNTB0 = 12500; //定时器装载值12500
    rTCON &amp;= ~0x1f;
    rTCON |= 0x02;
    rTCON = 0x09;          //启动定时器
    EnableIrq(BIT_TIMER0); //INTMSK
}
</code></pre>
<p><strong>2、如何用定时器实现 LED 闪烁的准确定时?</strong><br>
定义一个定时器延时函数</p>
<pre><code class="language-c">void timer_delay_s(U32 t)
{
    /* 给定初始值,在中断中递减,减到0为止 */
    timer_count = t;
    timer0_init();
    while (timer_count != 0) ;
}
static void __irq timer0_handler(void)
{
    if (timer_count != 0)
        timer_count--;
    else
        rTCON = 0;            //停止定时器
    ClearPending(BIT_TIMER0); //SRCPND INTPND
}
void timer0_test(void)
{
    U32 data;
    timer_count = 0;
    rGPBCON = 0x155555;
    data = 0x06;
    while (1)
    {
        /* 使用定时器让LED灯间隔1s精确闪烁 */
        rGPBDAT = (data &lt;&lt; 5);
        timer_delay_s(1);
        data = ~data;
    }
}
</code></pre>
<h3 id="实验效果-3">实验效果</h3>
<figure data-type="image" tabindex="3"><img src="https://baldstudio.cn/post-images/1587646096856.gif" alt="" loading="lazy"></figure>
<h2 id="实验五-nand-flash实验">实验五 NAND FLASH实验</h2>
<h3 id="基本目标-3">基本目标</h3>
<p><strong>实现在NAND FLASH上数据的读取和写入</strong></p>
<pre><code class="language-c">void nand_test(void)
{
    U16 ID,i;
 	U8  buf[2048];
    char name[100] = &quot;chenhui&quot;; //自定义的数据
	U32 NFBlockNO;
   	U32 NFPagesNO;
	U32 size=32;	   		//定义读写的大小
   	U32 addr=0x000000;		//定义读写的地址

 	U32 status;
 	U32 BlockPages;
 	Uart_Printf(&quot;Nandflash Test.\n&quot;);
 	InitNandCfg();            						//初始化函数
 	ID=ReadChipId();								//ID 
 	Uart_Printf(&quot;Nandflash`s ID is:%x\n&quot;,ID);
 
	NFBlockNO=(addr&amp;0x1ffc0000)&gt;&gt;18; 		//第几块
	NFPagesNO=(addr&amp;0x0003f000)&gt;&gt;12;  		//第几页
	BlockPages=addr&gt;&gt;12; 					//转化为总页数

   	if(EraseBlock(BlockPages)&amp;0x1==TRUE)			
       //因为EraseBlock()的输入参数是页数，所以输入的是BlockPages
  	{  
		Uart_Printf(&quot;address:%x  size:%d\n&quot;,addr,size);
  		Uart_Printf(&quot;block %d is erased\n&quot;,NFBlockNO);		//打印擦除的是那一块
  		Uart_Printf(&quot;\n\nwrite data:\n&quot;);
  		for(i=0; i&lt;size; i++)
  		{
   			Uart_Printf(&quot;%c&quot;, name[i]);  
      	}
    
       	status = WritePage(addr,size,name);			//写入数据 
      
      	if(status&amp;0x1==TRUE )						//返回成功值  
        	Uart_Printf(&quot;\nWrite OK.\n&quot;);
       	else  
        	Uart_Printf(&quot;\nWrite Error.\n&quot;);
       
      	for(i=0; i&lt;size; i++)
         	buf[i] = 1;				
             //为验证后边数组中的数据是来自flash,实际上相当于是在数组中擦除了flash的数据，因为如果flash擦除时内容就全为1
       
      	ReadPage(addr,size,buf); 	//将读取的数据存入buf中
      	Uart_Printf(&quot;\n\nRead data:\n&quot;);		//输出块号和页号
      
    	for(i=0; i&lt;size; i++)
   		Uart_Printf(&quot;%c&quot;, buf[i]);	//打印所读取的数据
  	}
   
 	else
  		Uart_Printf(&quot;\nblock %4x erased is bad\n&quot;,NFBlockNO); 				
          //否则是坏块，并打印信息
 
}
</code></pre>
<h3 id="思考题-4">思考题</h3>
<p><strong>1. 简述ECC的使用方法</strong></p>
<ol>
<li>软件模式下，ECC 模块生成 ECC 奇偶校验码用于读/写数据。因此你可以写入 InitECC（NFCONT[4]）位为’1’.并在读或写数据之前清除 MainECCLock（NFCONT[5]）位为’0’（开锁）来复位 ECC 的值。MainECCLock（NFCONT[5]）和 SpareECCLock（NFCONT[6]）是控制是否生成 ECC 奇偶校验码。</li>
<li>每当读取或写入数据时，ECC 模块将生成 ECC 奇偶校验码到寄存器 NFMECC0/1 中。</li>
<li>当你完成了读或写一页以后（不包括备份区域数据），设置 MainECCLock 位为’1’（锁）。ECC 奇偶校验码被锁住并且 ECC 状态寄存器的值也将不会被改变。</li>
<li>要生成备份区域 ECC 奇偶校验码，清除 SpareECCLock（NFCONT[6]）位为’0’（开锁）即可。</li>
<li>每当读取或写入数据时，备份区域 ECC 模块生成 ECC 奇偶校验码到寄存器 NFSECC 中。</li>
<li>当你完成了读或写备份区域后，设置 SpareECCLock 位为’1’（锁）。ECC 奇偶校验码被锁住并且 ECC 状态寄存器的值也将不会被改变。</li>
<li>每完成一次你可以用这些值来标记备份区域或检查位错误。</li>
</ol>
<p><strong>2.请解释 NAND Flash 中存放的程序能否执行？</strong><br>
不能直接执行,必须先读取到RAM中,才能执行,因为nand由于制作工艺的原因，不能像其他一些memory一样通过数据和地址线访问，而只能通过IO顺序访问，因此访问效率较低，但是其传输速度快，所以适合做大容量存储器，而相对来说Nor Flash适合做代码存储。</p>
<p><strong>3、开发板中，NAND Flash 测试读写数据的地址至少是多少?</strong><br>
若不是从NAND引导启动,可以从0x00000000开始读取,若从NAND引导启动,需往后推4kb.</p>
<h3 id="实验效果-4">实验效果</h3>
<figure data-type="image" tabindex="4"><img src="https://baldstudio.cn/post-images/1587645234893.png" alt="" loading="lazy"></figure>
<h2 id="实验六-触摸屏实验">实验六 触摸屏实验</h2>
<h3 id="基本目标-4">基本目标</h3>
<p><strong>编程实现触摸坐标点的探测</strong></p>
<pre><code class="language-c">void ts_test(void)
{
    rADCDLY = (50000);
    rADCCON = (1 &lt;&lt; 14) | (ADCPRS &lt;&lt; 6) | 
                        (0 &lt;&lt; 3) | (0 &lt;&lt; 2) | (0 &lt;&lt; 1) | (0);
    rADCTSC = (0 &lt;&lt; 8) | (1 &lt;&lt; 7) | (1 &lt;&lt; 6) | 
                        (0 &lt;&lt; 5) | (1 &lt;&lt; 4) | (0 &lt;&lt; 3) | (0 &lt;&lt; 2) | (3);
    pISR_ADC = (unsigned)ts_handler; //定义中断响应函数
    rINTMSK = ~(BIT_ADC);
    rINTSUBMSK = ~(BIT_SUB_TC);
    while (1) ;
}

static void __irq ts_handler(void)
{
    U32 i;
    U32 Pt[6];
    rINTSUBMSK |= (BIT_SUB_ADC | BIT_SUB_TC);
    if (rADCTSC &amp; 0x100)
    {
        Uart_Printf(&quot;\nStylus Up!!\n&quot;);
        rADCTSC &amp;= 0xff; // Set stylus down interrupt
    }
    else
    {
        Uart_Printf(&quot;\nStylus Down!!\n&quot;);
        rADCTSC = (0 &lt;&lt; 8) | (0 &lt;&lt; 7) | (1 &lt;&lt; 6) | (
                            1 &lt;&lt; 5) | (0 &lt;&lt; 4) | (1 &lt;&lt; 3) | (0 &lt;&lt; 2) | (1);
        for (i = 0; i &lt; 100; i++)
            ;                   //delay to set up the next channel
        for (i = 0; i &lt; 5; i++) //5 times
        {
            rADCCON |= 0x1; // Start X-position conversion
            while (rADCCON &amp; 0x1)
                ; // Check if Enable_start is low
            while (!(0x8000 &amp; rADCCON))
                ; // Check ECFLG
            Pt[i] = (0x3ff &amp; rADCDAT0);
        }
        Pt[5] = (Pt[0] + Pt[1] + Pt[2] + Pt[3] + Pt[4]) / 5; //求一个平均值
        Uart_Printf(&quot;X-Posion[AIN5] is %04d\n&quot;, Pt[5]);
        rADCTSC = (0 &lt;&lt; 8) | (0 &lt;&lt; 7) | (1 &lt;&lt; 6) |
                             (1 &lt;&lt; 5) | (0 &lt;&lt; 4) | (1 &lt;&lt; 3) | (0 &lt;&lt; 2) | (2);
        // Down,GND,Ext vlt,Hi-Z,AIN7,Pullup Dis,Normal,Y-position
        for (i = 0; i &lt; 100; i++)
            ;                   //delay to set up the next channel
        for (i = 0; i &lt; 5; i++) //5 times
        {
            rADCCON |= 0x1; // Start Y-position conversion
            while (rADCCON &amp; 0x1)
                ; // Check if Enable_start is low
            while (!(0x8000 &amp; rADCCON))
                ; // Check ECFLG
            Pt[i] = (0x3ff &amp; rADCDAT1);
        }
        Pt[5] = (Pt[0] + Pt[1] + Pt[2] + Pt[3] + Pt[4]) / 5; //求一个平均值
        Uart_Printf(&quot;Y-Posion[AIN7] is %04d\n&quot;, Pt[5]);
        rADCTSC = (1 &lt;&lt; 8) | (1 &lt;&lt; 7) | (1 &lt;&lt; 6) | 
                            (0 &lt;&lt; 5) | (1 &lt;&lt; 4) | (0 &lt;&lt; 3) | (0 &lt;&lt; 2) | (3);
    }
    rSUBSRCPND |= BIT_SUB_TC;
    rINTSUBMSK = ~(BIT_SUB_TC); // Unmask sub interrupt (TC)
    ClearPending(BIT_ADC);
}
</code></pre>
<h3 id="思考题-5">思考题</h3>
<p><strong>如何配置寄存器以实现 X、Y 坐标的连续采集？</strong><br>
实现连续采集的方法是,在检测到笔尖落下后开启定时器中断,每隔一段时间采集一次坐标,直到检测到笔尖抬起,关闭定时器中断</p>
<pre><code class="language-c">void ts_test(void)
{
    rADCDLY = (50000);
    rADCCON = (1 &lt;&lt; 14) | (ADCPRS &lt;&lt; 6) | (0 &lt;&lt; 3) | (0 &lt;&lt; 2) | (0 &lt;&lt; 1) | (0);
    rADCTSC = (0 &lt;&lt; 8) | (1 &lt;&lt; 7) | (1 &lt;&lt; 6) | (0 &lt;&lt; 5) | (1 &lt;&lt; 4) | (0 &lt;&lt; 3) | (0 &lt;&lt; 2) | (3);
    pISR_ADC = (unsigned)ts_handler; //定义中断响应函数
    rINTMSK = ~(BIT_ADC);
    rINTSUBMSK = ~(BIT_SUB_TC);
    while (1)
        ;
}

U8 ts_flag = 0; /* 记录笔尖是否按下的全局变量,用来控制定时器中断 */

static void __irq ts_handler(void)
{
    rINTSUBMSK |= (BIT_SUB_ADC | BIT_SUB_TC);
    if (rADCTSC &amp; 0x100)
    {
        ts_flag = 0; /* 全局变量置零 */
        Uart_Printf(&quot;\nStylus Up!!\n&quot;);
        rADCTSC &amp;= 0xff; // Set stylus down interrupt
    }
    else
    {
        Uart_Printf(&quot;\nStylus Down!!\n&quot;);
        ts_flag = 1; /* 全局变量置一 */
        timer1_init(); /* 开启定时器中断 */
        rADCTSC = (1 &lt;&lt; 8) | (1 &lt;&lt; 7) | (1 &lt;&lt; 6) | (0 &lt;&lt; 5) | 
                            (1 &lt;&lt; 4) | (0 &lt;&lt; 3) | (0 &lt;&lt; 2) | (3);
    }
    rSUBSRCPND |= BIT_SUB_TC;
    rINTSUBMSK = ~(BIT_SUB_TC); // Unmask sub interrupt (TC)
    ClearPending(BIT_ADC);
}

/* 定时器1初始化 */
void timer1_init(void)
{
    /* PCLK为50M,定时器输入时钟设置为12500hz,定时器重装值设置为1250,可以实现100ms一次的中断 */
    ClearPending(BIT_TIMER1); //SRCPND INTPND
    pISR_TIMER1 = (U32)timer1_handler;
    rTCFG0 &amp;= ~0xff;
    rTCFG0 |= 249; //prescaler = 249+1
    rTCFG1 &amp;= ~0xf0;
    rTCFG1 |= 3 &lt;&lt; 4; //mux = 1/16
    rTCNTB1 = 1250;   //定时器装载值12500
    rTCON &amp;= ~0xf00;
    rTCON |= 1 &lt;&lt; 9;
    rTCON = 0x09 &lt;&lt; 8;     //启动定时器
    EnableIrq(BIT_TIMER1); //INTMSK
}

static void __irq timer1_handler(void)
{
    U32 i;
    U32 Pt[6];
    rADCTSC = (0 &lt;&lt; 8) | (0 &lt;&lt; 7) | (1 &lt;&lt; 6) | (1 &lt;&lt; 5) | 
                        (0 &lt;&lt; 4) | (1 &lt;&lt; 3) | (0 &lt;&lt; 2) | (1);
    for (i = 0; i &lt; 100; i++)
        ;                   //delay to set up the next channel
    for (i = 0; i &lt; 5; i++) //5 times
    {
        rADCCON |= 0x1; // Start X-position conversion
        while (rADCCON &amp; 0x1)
            ; // Check if Enable_start is low
        while (!(0x8000 &amp; rADCCON))
            ; // Check ECFLG
        Pt[i] = (0x3ff &amp; rADCDAT0);
    }
    Pt[5] = (Pt[0] + Pt[1] + Pt[2] + Pt[3] + Pt[4]) / 5; //求一个平均值
    Uart_Printf(&quot;X-Posion[AIN5] is %04d\n&quot;, Pt[5]);
    rADCTSC = (0 &lt;&lt; 8) | (0 &lt;&lt; 7) | (1 &lt;&lt; 6) | (1 &lt;&lt; 5) | (0 &lt;&lt; 4) | 
                        (1 &lt;&lt; 3) | (0 &lt;&lt; 2) | (2);
    // Down,GND,Ext vlt,Hi-Z,AIN7,Pullup Dis,Normal,Y-position
    for (i = 0; i &lt; 100; i++);     //delay to set up the next channel
    for (i = 0; i &lt; 5; i++) //5 times
    {
        rADCCON |= 0x1; // Start Y-position conversion
        while (rADCCON &amp; 0x1) ; // Check if Enable_start is low
        while (!(0x8000 &amp; rADCCON)) ; // Check ECFLG
        Pt[i] = (0x3ff &amp; rADCDAT1);
    }
    Pt[5] = (Pt[0] + Pt[1] + Pt[2] + Pt[3] + Pt[4]) / 5; //求一个平均值
    Uart_Printf(&quot;Y-Posion[AIN7] is %04d\n&quot;, Pt[5]);
    rADCTSC = (1 &lt;&lt; 8) | (1 &lt;&lt; 7) | (1 &lt;&lt; 6) | (0 &lt;&lt; 5) | (1 &lt;&lt; 4) |                                    (0 &lt;&lt; 3) | (0 &lt;&lt; 2) | (3);
    if (ts_flag == 0)
        rTCON = 0;            //停止定时器
    ClearPending(BIT_TIMER1); //SRCPND INTPND
}
</code></pre>
<h3 id="实验效果-5">实验效果</h3>
<figure data-type="image" tabindex="5"><img src="https://baldstudio.cn/post-images/1587645087431.png" alt="" loading="lazy"></figure>
<h2 id="实验七-lcd实验">实验七 LCD实验</h2>
<h3 id="基本目标-5">基本目标</h3>
<p><strong>编程实现在 LCD 上绘制自定义的图像</strong></p>
<pre><code class="language-c">static void lcd_test_word(void)
{
    unsigned char jch[3][32] = {
        0x08,0x20,0x08,0x20,0xFF,0xFE,0x08,0x20,
        0x00,0x80,0x08,0xF8,0x49,0x10,0x2A,0xA0,
        0x28,0x50,0x08,0x90,0x1B,0xFE,0x29,0x10,
        0x48,0x90,0x88,0x90,0x08,0x10,0x08,0x30,/*&quot;蒋&quot;,0*/

        0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x10,0x10,
        0x1F,0xF0,0x00,0x00,0x3F,0xFC,0x20,0x00,
        0x2F,0xF8,0x20,0x00,0x3F,0xFE,0x29,0x08,
        0x28,0x90,0x48,0x60,0x4A,0x18,0x8C,0x06,/*&quot;晨&quot;,1*/

        0x10,0x00,0x13,0xFE,0x92,0x02,0x54,0x44,
        0x58,0x40,0x13,0xFC,0xFC,0x80,0x28,0xA0,
        0x29,0x20,0x29,0xFC,0x28,0x20,0x28,0x20,
        0x2B,0xFE,0x4C,0x20,0x48,0x20,0x80,0x20,/*&quot;辉&quot;,2*/
        };

    Brush_Background(0xFFFFFF); //绘制白色背景
    draw_chineseword(50, 100, 0x0, jch[0]);
    draw_chineseword(66, 100, 0x0, jch[1]);
    draw_chineseword(82, 100, 0x0, jch[2]);
}

void lcd_test(void)
{
    Lcd_port_init();
    Lcd_init();
    Lcd_PowerEnable(1);
    Lcd_EnvidOnOff(1);
    lcd_test_word(); /* 在lcd上显示名字 */
}
</code></pre>
<h3 id="思考题-6">思考题</h3>
<p><strong>1. LCD中DMA的作用</strong><br>
为了提高显示速度,一般在内存中开辟一块内存作为显存,映射到LCD的数据寄存器中,控制器只需向显存中写入数据,DMA部件会自动将数据传输到LCD寄存器中,完成显示.<br>
<strong>2. LCD刷新率如何确定</strong><br>
Frame Rate = 1/{(VSPW+1)+(VBPD+1)+(LINEVAL+1)+(VFPD+!)}x{(HSPW+!)+(HBPD+1)+(HFPD+1)+(HOZVAL+1)}x{2x(CLKVAL+1)/(HCLK)}<br>
<strong>3. 字模软件中，MSB 和 LSB 对显示图片有何影响？为什么？</strong><br>
会使图片左右颠倒.因为像素的排列顺序反了.</p>
<h3 id="实验效果-6">实验效果</h3>
<figure data-type="image" tabindex="6"><img src="https://baldstudio.cn/post-images/1587645032803.jpg" alt="" loading="lazy"></figure>
<h2 id="实验八-linux操作与串口通信">实验八 Linux操作与串口通信</h2>
<h2 id="实验九-操作系统裁剪与移植">实验九 操作系统裁剪与移植</h2>
<h2 id="实验十-嵌入式linux应用程序开发">实验十 嵌入式Linux应用程序开发</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RCEA学习营]第1周]]></title>
        <id>https://baldstudio.cn/post/rcea-xue-xi-ying-di-1-zhou/</id>
        <link href="https://baldstudio.cn/post/rcea-xue-xi-ying-di-1-zhou/">
        </link>
        <updated>2020-04-20T10:06:52.000Z</updated>
        <content type="html"><![CDATA[<p><strong>作者: 蒋晨辉</strong></p>
<h3 id="需要掌握的内容">需要掌握的内容</h3>
<p>第一周主要任务是内核，使用到了RT-Thread simulator压缩包，还没用到ds18b20和esp8266。还没硬件的小伙伴们要赶快啦，后面就要用上了。</p>
<p>以下整理了第一周学习需要掌握的<strong>5项</strong>内容，以及相关的学习文档/视频链接，内容较多但还算比较基础，推荐大家每天完成一项内容（根据经验，每次学习都会有部分人很积极且效率贼高，所以”每天完成一项“只是做个推荐而不强制，完成的早那就更好了），记得为自己预留做作业的时间。</p>
<ul>
<li>1、RT-Thread基础：
<ul>
<li>学习文档：<a href="https://www.rt-thread.org/document/site/tutorial/quick-start/introduction/introduction/">RT-Thread简介</a> 、<a href="https://www.rt-thread.org/document/site/">首页简介-版本选择</a>、<a href="https://www.rt-thread.org/document/site/programming-manual/basic/basic/">内核基础</a></li>
<li>学习视频：查看群里分享的资料，第一期视频
<ul>
<li>《1.RT-Thread简单介绍》</li>
</ul>
</li>
</ul>
</li>
<li>2、线程
<ul>
<li>学习文档：<a href="https://www.rt-thread.org/document/site/programming-manual/thread/thread/">线程管理</a></li>
<li>学习视频：与线程管理文档配套的视频如下
<ul>
<li><a href="https://www.bilibili.com/video/av79513262?p=3">线程创建</a>、</li>
<li><a href="https://www.bilibili.com/video/av79513262?p=4">线程属性</a>、</li>
<li><a href="https://www.bilibili.com/video/av79513262?p=5">时间片</a>、</li>
<li><a href="https://www.bilibili.com/video/av79513262?p=6">空闲线程与钩子函数</a></li>
</ul>
</li>
</ul>
</li>
<li>3、timer
<ul>
<li>学习文档：<a href="https://www.rt-thread.org/document/site/programming-manual/timer/timer/">时钟管理</a></li>
<li>学习视频：与时钟管理文档配套的视频如下
<ul>
<li><a href="https://www.bilibili.com/video/av79513262?p=15">定时器</a></li>
</ul>
</li>
</ul>
</li>
<li>4、IPC
<ul>
<li>学习文档：1.<a href="https://www.rt-thread.org/document/site/programming-manual/ipc1/ipc1/">信号量/互斥量/事件集</a>；2.<a href="https://www.rt-thread.org/document/site/programming-manual/ipc2/ipc2/">邮箱/消息队列</a>;</li>
<li>学习视频：与IPC配套的视频如下
<ul>
<li><a href="https://www.bilibili.com/video/av79513262?p=8">信号量</a>、以及<a href="https://www.bilibili.com/video/av79513262?p=9">消费者例程</a></li>
<li><a href="https://www.bilibili.com/video/av79513262?p=10">互斥量</a>、以及<a href="https://www.bilibili.com/video/av79513262?p=11">解决优先级反转示例</a></li>
<li><a href="https://www.bilibili.com/video/av79513262?p=12">事件集</a>、</li>
<li><a href="https://www.bilibili.com/video/av79513262?p=13">邮箱</a>、</li>
<li><a href="https://www.bilibili.com/video/av79513262?p=14">消息队列</a></li>
</ul>
</li>
</ul>
</li>
<li>5、内存
<ul>
<li>学习文档：<a href="https://www.rt-thread.org/document/site/programming-manual/memory/memory/">内存管理</a></li>
<li>学习视频：<a href="https://www.bilibili.com/video/av79513262?p=16">内存池</a></li>
</ul>
</li>
</ul>
<h3 id="目标">目标</h3>
<p>在<strong>掌握以上内容之后</strong>，我们在此基础上<strong>还</strong>需要完成以下几个目标：</p>
<p><strong>目标1：了解RT-Thread启动流程。</strong><br>
RT-Thread启动并不和裸机代码一样,直接从汇编启动文件直接跳转到main函数.RT-Thread中在进入<code>main</code>函数之前,会先进入<code>rtthread_startup()</code>函数中,完成系统初始化之后,再跳转到用户主函数.<br>
<img src="https://baldstudio.cn/post-images/1587434046315.png" alt="" loading="lazy"><br>
从<code>startup_xx.S</code>启动之后,会根据编译器进入不同的入口函数,MDK中是<code>$Sub$$main()</code>,IAR中是<code>__low_level_init()</code>,gcc中是<code>entry()</code>.这些入口函数是由编译器自身规定的.在这之后,会跳转到统一的<code>rtthread_startup()</code>函数中,在这个函数里完成系统的初始化.</p>
<pre><code class="language-c">int rtthread_startup(void)
{
    rt_hw_interrupt_disable();

    /* board level initialization
     * NOTE: please initialize heap inside board initialization.
     */
    rt_hw_board_init();

    /* show RT-Thread version */
    rt_show_version();

    /* timer system initialization */
    rt_system_timer_init();

    /* scheduler system initialization */
    rt_system_scheduler_init();

#ifdef RT_USING_SIGNALS
    /* signal system initialization */
    rt_system_signal_init();
#endif

    /* create init_thread */
    rt_application_init();

    /* timer thread initialization */
    rt_system_timer_thread_init();

    /* idle thread initialization */
    rt_thread_idle_init();

#ifdef RT_USING_SMP
    rt_hw_spin_lock(&amp;_cpus_lock);
#endif /*RT_USING_SMP*/

    /* start scheduler */
    rt_system_scheduler_start();

    /* never reach here */
    return 0;
}
</code></pre>
<p><strong>目标2：了解RT-Thread自动初始化原理，知道如何对一个函数进行自动初始化。</strong><br>
自动初始化机制是指初始化函数不需要被显式调用，只需要在函数定义处通过宏定义的方式进行申明，<br>
就会在系统启动过程中被执行。<br>
自动初始化执行的地方如图所示<br>
<img src="https://baldstudio.cn/post-images/1587436687793.png" alt="" loading="lazy"><br>
<code>rt_components_board_init()</code>在系统调度启动之前就执行了,主要是初始化相关硬件环境.执行这个函数时将会遍历通过 INIT_BOARD_EXPORT(fn) 申明的初始化函数表，并调用各个函数。<br>
<code>rt_components_init()</code>函数会在操作系统运行起来之后创建的 main 线程里被调用执行，这个时候硬件环境和操作系统已经初始化完成，可以执行应用相关代码。 rt_components_init() 函数会遍历通过剩下的其他几个宏申明的初始化函数表。<br>
RT-Thread提供的自动初始化函数类型有以下几种:</p>
<table>
<thead>
<tr>
<th style="text-align:center">初始化顺序</th>
<th style="text-align:center">宏接口</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">INIT_BOARD_EXPORT(fn)</td>
<td style="text-align:center">非常早期的初始化，此时调度器还未启动</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">INIT_PREV_EXPORT(fn)</td>
<td style="text-align:center">主要是用于纯软件的初始化、没有太多依赖的函数</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">INIT_DEVICE_EXPORT(fn)</td>
<td style="text-align:center">外设驱动初始化相关，比如网卡设备</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">INIT_COMPONENT_EXPORT(fn)</td>
<td style="text-align:center">组件初始化，比如文件系统或者 LWIP</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">INIT_ENV_EXPORT(fn)</td>
<td style="text-align:center">系统环境初始化，比如挂载文件系统</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">INIT_ENV_EXPORT(fn)</td>
<td style="text-align:center">应用初始化，比如 GUI 应用</td>
</tr>
</tbody>
</table>
<p>自动初始化的原理是RT-Thread在链接脚本里自定义了一个RTI符号段,在编译时把所有通过宏声明的函数地址放在这个段中.在执行的时候,将函数地址读出并执行.</p>
<p><strong>目标3：知道 rt-thread完整版本 与 rt-thread-nano版本 的区别.</strong><br>
RT-Thread完整版不仅仅是一个实时内核，还具备丰富的中间层组件.<br>
<img src="https://baldstudio.cn/post-images/1587437398327.png" alt="" loading="lazy"><br>
它具体包括以下部分:</p>
<ul>
<li>内核层：RT-Thread 内核，是 RT-Thread 的核心部分，包括了内核系统中对象的实现，例如多线程及其调度、信号量、邮箱、消息队列、内存管理、定时器等；libcpu/BSP（芯片移植相关文件 / 板级支持包）与硬件密切相关，由外设驱动和 CPU 移植构成。</li>
<li>组件与服务层：组件是基于 RT-Thread 内核之上的上层软件，例如虚拟文件系统、FinSH 命令行界面、网络框架、设备框架等。采用模块化设计，做到组件内部高内聚，组件之间低耦合。</li>
<li>RT-Thread 软件包：运行于 RT-Thread 物联网操作系统平台上，面向不同应用领域的通用软件组件，由描述信息、源代码或库文件组成。RT-Thread 提供了开放的软件包平台，这里存放了官方提供或开发者提供的软件包，该平台为开发者提供了众多可重用软件包的选择，这也是 RT-Thread 生态的重要组成部分。软件包生态对于一个操作系统的选择至关重要，因为这些软件包具有很强的可重用性，模块化程度很高，极大的方便应用开发者在最短时间内，打造出自己想要的系统。RT-Thread 已经支持的软件包数量已经达到 60+，如下举例：
<ul>
<li>物联网相关的软件包：Paho MQTT、WebClient、mongoose、WebTerminal 等等。</li>
<li>脚本语言相关的软件包：目前支持 JerryScript、MicroPython。</li>
<li>多媒体相关的软件包：Openmv、mupdf。</li>
<li>工具类软件包：CmBacktrace、EasyFlash、EasyLogger、SystemView。</li>
<li>系统相关的软件包：RTGUI、Persimmon UI、lwext4、partition、SQLite 等等。</li>
<li>外设库与驱动类软件包：RealTek RTL8710BN SDK。</li>
<li>其他。<br>
RT-Thread Nano是一个极简版的硬实时内核，它是由 C 语言开发，采用面向对象的编程思维，具有良好的代码风格，是一款可裁剪的、抢占式实时多任务的 RTOS。其内存资源占用极小，功能包括任务处理、软件定时器、信号量、邮箱和实时调度等相对完整的实时操作系统特性。适用于家电、消费电子、医疗设备、工控等领域大量使用的 32 位 ARM 入门级 MCU 的场合。<br>
<img src="https://baldstudio.cn/post-images/1587437637290.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
<h3 id="作业">作业</h3>
<p>作业1【学习营实战——1】：基于rt-thread4.0.2，能根据<a href="https://github.com/RT-Thread/rt-thread/blob/master/bsp/stm32/docs/STM32%E7%B3%BB%E5%88%97BSP%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B.md">BSP制作教程</a> 及群里分享的视频《2.RT-Thread移植》，让自己的板子在RT-Thread上运行起来，了解BSP的制作。<br>
BSP已做好,地址在<a href="https://github.com/jch12138/stm32-f407vet6-minisystem-rtt">github</a><br>
作业2：能使用信号量的方式，同步LED的亮灭，500ms亮 500ms灭。</p>
<pre><code class="language-c">#include &quot;rtthread.h&quot;
#include &lt;rtdevice.h&gt;
#include &lt;board.h&gt;

/* defined the LED0 pin: PC13 */
#define LED0_PIN    GET_PIN(C, 13)

static rt_sem_t led = RT_NULL;

static void led_open_entry(void *parameter)
{
    while(1)
    {
        rt_sem_take(led,RT_WAITING_FOREVER);
        rt_pin_write(LED0_PIN,PIN_LOW);
        rt_thread_mdelay(500);
        rt_sem_release(led);
    }
}

static void led_close_entry(void *parameter)
{
    while (1)
    {
        rt_sem_take(led,RT_WAITING_FOREVER);
        rt_pin_write(LED0_PIN,PIN_HIGH);
        rt_thread_mdelay(500);
        rt_sem_release(led);
    }   
}

int led_sem_test(int argc, char **argv)
{
    rt_pin_mode(LED0_PIN, PIN_MODE_OUTPUT);
    led = rt_sem_create(&quot;led&quot;,1,RT_IPC_FLAG_FIFO);
    rt_thread_t tid1 = rt_thread_create(&quot;led_open&quot;,
                                    led_open_entry,
                                    RT_NULL,
                                    1024,
                                    3,
                                    10);

    rt_thread_t tid2 = rt_thread_create(&quot;led_close&quot;,
                                    led_close_entry,
                                    RT_NULL,
                                    1024,
                                    3,
                                    10);
    rt_thread_startup(tid1);
    rt_thread_startup(tid2);

}
MSH_CMD_EXPORT(led_sem_test,led_sem_test);
</code></pre>
<h3 id="总结">总结</h3>
<p>本周我们已经掌握了RT-Thread基础、内核、BSP制作等内容。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MSP430G2553学习笔记：入门😁]]></title>
        <id>https://baldstudio.cn/post/msp430g2553-xue-xi-bi-ji-ru-men/</id>
        <link href="https://baldstudio.cn/post/msp430g2553-xue-xi-bi-ji-ru-men/">
        </link>
        <updated>2020-04-14T08:59:26.000Z</updated>
        <content type="html"><![CDATA[<p><strong>作者: 许威</strong><br>
学校的单片机课程选用了MSP430G2553，上了几节课有了一定的了解，于是就打算简单的来入门一下。</p>
<h3 id="主要部件">主要部件</h3>
<ul>
<li>
<p>MSP430G2553 开发板</p>
</li>
<li>
<p>LCD1602显示器</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://baldstudio.cn/post-images/1586854858163.jpg" alt="" loading="lazy"></figure>
<h3 id="线路连接">线路连接</h3>
<ul>
<li>
<h4 id="查看lcd1602的使用手册的接口说明">查看LCD1602的使用手册的接口说明</h4>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://baldstudio.cn/post-images/1586854867204.jpg" alt="" loading="lazy"></figure>
<ul>
<li>
<h4 id="具体接线">具体接线</h4>
<ul>
<li>该接电源的接电源，该接地的接地</li>
<li>D0~D7  ==&gt;  P2.0~P2.7</li>
<li>VL  ===&gt;  滑动变阻器  ===&gt;  接地</li>
<li>RS  ===&gt;  P1.7</li>
<li>R/W  ==&gt;  P1.6 ，并且将开发板上的P1.6LED的跳线帽拔掉</li>
<li>E  ==&gt;  P1.5</li>
</ul>
</li>
<li>
<h4 id="实物图">实物图</h4>
<p>​	只要接的对，疯狂走线也没有问题😂。由于MSP430工作电压为3.3V，LCD1602的工作电压为5V，这里用了USB转TTL模块给LCD供电。MSP430用USB线供电。❀两开花❀</p>
</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://baldstudio.cn/post-images/1586854881991.jpg" alt="" loading="lazy"></figure>
<h3 id="点亮lcd显示内容">点亮LCD：显示内容</h3>
<p>在LCD上显示东西需要分两个步骤，一个是发送指令（Command），另一个是发送数据（Data）。</p>
<p>指令用于确定显示位置和LCD显示设置。数据就是显示的内容。</p>
<p>第一行显示的位置从0x00开始，第二行从0x40开始，每行16个，多的不显示。</p>
<p><strong>需要注意的是选择显示的位置时，需要额外加上0x80，具体原因和其驱动器有关，这里不深究</strong>。</p>
<p><strong>写指令/数据</strong>代码如下：</p>
<pre><code class="language-c">//**********************************
//       LCD写指令函数
//**********************************
void LCD_writeCmd(unsigned char command)
{
  RS &amp;= ~BIT7;         //设置为指令
  RW &amp;= ~BIT6;         //设置为写操作
  delay_ms(1);
  EN |= BIT5;          //使能端设为高
  P2OUT = command;     //发送指令
  delay_ms(1);
  EN &amp;= ~BIT5;         //关闭使能端
}

//**********************************
//        LCD写数据函数
//**********************************
void LCD_writeData(unsigned char data)
{
  RS |= BIT7;            //设置为数据
  RW &amp;= ~BIT6;           //设置为写操作
  delay_ms(1); 
  EN |= BIT5;            //使能端设为高
  P2OUT = data;          //发送数据
  delay_ms(1);
  EN &amp;= ~BIT5;           //关闭使能端
}
</code></pre>
<p>当然，在使用之前，还要对显示的模式进行设置。</p>
<pre><code class="language-c">//**********************************
//        LCD初始化函数
//**********************************
void LCD_init(void)
{
  RW &amp;= ~BIT6;
  LCD_writeCmd(0x38);  //设置为八线模式，两行显示
  LCD_writeCmd(0x0C);  //00001+(1:开显示；0：关显示)+（1：显示光标；0：不显示光标)+(1:光标闪烁；						  0：不闪烁)
  LCD_writeCmd(0x06);  //000001+(1:光标自动加一；0：光标自动减一)+（1：整屏移动，方向取决于前一							位；0：不移动）
  LCD_writeCmd(0x01);  //数据指针清零，显示清零
  					   //0x02 数据指针清零
}
</code></pre>
<h3 id="定时器计时">定时器：计时</h3>
<p>刚刚入门，还需学习🤦‍，详见 <a href="https://www.ti.com/lit/ug/slau144j/slau144j.pdf">MSP430x2xx Family User's Guide</a> 里的Timer_A。</p>
<p>下面是在SMCLK频率1MHz下，经过10ms触发中断的Timer_A初始化函数。</p>
<pre><code class="language-c">//**********************************
//     TimerA初始化函数
//**********************************
void TIMERA_init()                       
{
  TACTL |= TASSEL_2;  //SMCLK做时钟源
  TACTL |= ID_0;      //不分频
  TACTL |= MC_1;      //增计数模式
  TACTL |= TACLR;     //计数器清零
  TACCR0 = 9999;
  TACCTL0 |= CCIE;    //允许TACCR0中断
}
</code></pre>
<h3 id="最终结果">最终结果</h3>
<p>基于上面的基本知识、用法与函数，最后制作了一个***LCD显示计时器***，后期还会学习新的知识来增加功能。目前的效果如下。<br>
<video src="../../images/zui-zhong.mp4"  controls='0' height=auto width=100%> </video></p>
<h3 id="完整代码">完整代码</h3>
<pre><code class="language-c">  #include &lt;msp430.h&gt;
#include &lt;msp430G2553.h&gt;
  
  #define RS P1OUT  //RS --&gt; P1.7
  #define RW P1OUT  //RW --&gt; P1.6
  #define EN P1OUT  //EN --&gt; P1.5
  #define DATA_PORT P2OUT  //数据、指令 --&gt; P2.0~P2.7
  #define COMMAND_PORT P2OUT
  
  ////预定义函数
  void LCD_init(void); 
  void LCD_writeCmd(unsigned char command);
  void LCD_writeData(unsigned char data);
  void TIMERA_init(void);
  void delay_ms(int t);
  
  char  BALD[]=&quot;BalD STUDIO&quot;;
  char  TimeNum[]= &quot;00:00:00&quot;;
  unsigned int count;
  
  //**********************************
  //      P1中断函数
  //**********************************
  #pragma vector = PORT1_VECTOR
  __interrupt void port1(void)
  {
    delay_ms(2);
    if((P1IN &amp; BIT3)==0){
      unsigned int i;
      for(i=0; i&lt;8; i++)
      {
        if(i==2 || i==5)TimeNum[i]= 0x3A;
        else TimeNum[i]=0x30;
      }
    }
    P1IFG &amp;= ~BIT3;
  }
  
  //**********************************
  //      TimerA0中断函数
  //**********************************
  #pragma vector = TIMER0_A0_VECTOR   //TACCR0的中断向量
  __interrupt void Timer0_A0(void)
  {
    if(count == 100)
    {
      TimeNum[7] += 0x01;  //秒+1
      unsigned int i;
      for(i=0; i&lt;8; i++)   //进位的处理
      {
        switch(i)
        {
        case 0: case 1: case 4: case 7:if(TimeNum[i] == 0x3A){TimeNum[i-1] += 				0x01;TimeNum[i] = 0x30;}
        case 3: if(TimeNum[3] == 0x36){TimeNum[1] += 0x01;TimeNum[3] = 0x30;}
        case 6: if(TimeNum[6] == 0x36){TimeNum[4] += 0x01;TimeNum[6] = 0x30;}
        case 2: case 5: break;
        }
      }
      count = 0;
    }
    else
    {
      count++;
    }
    TACCTL0 &amp;= ~CCIFG;
  }
  
  //**********************************
  //      Main函数
  //**********************************
  void main(void)
  {
    WDTCTL = WDTPW + WDTHOLD; //关闭看门狗
    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    BCSCTL2 = SELM_1 + DIVM_1;
    
    P1SEL = 0x00;    //设置P1口为I/O模式
    P2SEL = 0x00;    //设置P2口为I/O模式
    P1DIR |= 0xFF;   //设置P1口为输出模式
    P2DIR |= 0xFF;   //设置P2口为输出模式
    P1OUT &amp;= 0x00;                  
    P2OUT &amp;= 0x00;
    
    P1DIR &amp;= ~BIT3;  //设置P1.3为输入
    P1REN |= BIT3;   //设置P1.3上拉电阻
    P1OUT |= BIT3;
    P1IES |= BIT3;   //设置下边缘触发
    P1IE |= BIT3;    //允许中断使能
    P1IFG &amp;= ~BIT3;  //关闭中断标志
    
    P1DIR |= BIT0;
    
    _EINT();   //开总中断
    
    TIMERA_init();
    LCD_init();
    
    while(1)
    { 
      P1OUT &amp;= ~BIT0;
      unsigned int i;
      //显示第一行
      LCD_writeCmd(0x80);
      i = 0;
      while(BALD[i] != '\0'){
        LCD_writeData(BALD[i]);
        i++;
      }
      //显示第二行
      LCD_writeCmd(0x80 + 0x40);
      i = 0;
      while(TimeNum[i] != '\0'){
        LCD_writeData(TimeNum[i]);
        i++;
      }
    }
  }
  
  //**********************************
  //     TimerA初始化函数
  //**********************************
  void TIMERA_init()                       
  {
    TACTL |= TASSEL_2;  //SMCLK做时钟源
    TACTL |= ID_0;      //不分频
    TACTL |= MC_1;      //增计数模式
    TACTL |= TACLR;     //计数器清零
    TACCR0 = 9999;
    TACCTL0 |= CCIE;    //允许TACCR0中断
  }
  
  //**********************************
  //       LCD写指令函数
  //**********************************
  void LCD_writeCmd(unsigned char command)
  {
    RS &amp;= ~BIT7;
    RW &amp;= ~BIT6;
    delay_ms(1);
    EN |= BIT5;
    P2OUT = command;
    delay_ms(1);
    EN &amp;= ~BIT5;
  }
  
  //**********************************
  //        LCD写数据函数
  //**********************************
  void LCD_writeData(unsigned char data)
  {
    RS |= BIT7;
    RW &amp;= ~BIT6;
    delay_ms(1);
    EN |= BIT5;
    P2OUT = data;
    delay_ms(1);
    EN &amp;= ~BIT5;
  }
  
  //**********************************
  //        LCD初始化函数
  //**********************************
  void LCD_init(void)
  {
    RW &amp;= ~BIT6;
    LCD_writeCmd(0x38);  //设置为八线模式，两行显示
    LCD_writeCmd(0x0C);  //00001+(1:开显示；0：关显示)+（1：显示光标；0：不显示光标)+(1:光标闪烁；0：不闪烁)
    LCD_writeCmd(0x06);  //指针自动增加一位
    LCD_writeCmd(0x01);  //清屏
  }
  
  //**********************************
  //      延时函数
  //**********************************
  void delay_ms(int t)
  {
    unsigned int i;
    for(i=0; i&lt;t; i++)
    {
      __delay_cycles(1000);
    }
  }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[麻雀一号]垃圾分类助手开发历程]]></title>
        <id>https://baldstudio.cn/post/ma-que-yi-hao-la-ji-fen-lei-zhu-shou-kai-fa-li-cheng/</id>
        <link href="https://baldstudio.cn/post/ma-que-yi-hao-la-ji-fen-lei-zhu-shou-kai-fa-li-cheng/">
        </link>
        <updated>2020-04-13T14:49:14.000Z</updated>
        <content type="html"><![CDATA[<p><strong>作者: 蒋晨辉</strong></p>
<h2 id="简单介绍">简单介绍</h2>
<p>最近参加了RT-Thread应用创新设计大赛,可以白嫖开发板,拿名次还有奖金,抱着刷履历和白嫖开发板的心情,我报了这个比赛.项目最终定为垃圾分类助手,大致功能是按下按键,摄像头拍照,将照片发送到云端进行识别,云端会把识别结果转成语音,返回给开发板,然后开发板播放识别结果.<br>
我申请的是麻雀一号开发板,下面简单介绍一下这块开发板<br>
<img src="https://baldstudio.cn/post-images/1586789929216.jpg" alt="" loading="lazy"></p>
<blockquote>
<p>麻雀一号开发板采用的主控芯片是 BK7252 , 是一款高性能 WiFi 模块，采用高集成的无线射频芯片,内部集成 2.4GHz Wi-Fi 1T1R 先进技术，支持摄像头图像输出，拥有最佳的功耗性能、射频性能、稳定性、通用性和可靠性，适用于各种应用和不同产品需求。模块内部拥有 512KB 内嵌 RAM 和 4Mbyte Flash 空间， CPU 主频高达 180Mhz。并且集成了天线开关、功率放大器、低噪放大器、过滤器、电源管理模块, 支持 802.11e 以及 WMM-PS 协议, 支持 WPA、 WPA2 和 WAPI 安全协议，同时集成了蓝牙 BLE 收发器，支持 BLE4.2，支持主机或从机模式。</p>
</blockquote>
<p>官方提供的sdk是基于RT-Thread v3.0.1的,版本有点老,略微有点让人有点不爽,想自己适配最新版,可是报了好多错,还是先老老实实用官方的吧😂.<br>
<img src="https://baldstudio.cn/post-images/1586790191438.png" alt="" loading="lazy"><br>
体验了一下子之后,发现官方sdk的功能已经很完善了,基本把这块板上所有资源都用到了.但是依然有点遗憾,官方的menuconfig没有适配好.早期适配了一下之后,就都在直接改&lt;rtconfig.h&gt;.导致一旦使用menuconfig后,会缺少大量宏定义导致编译失败.</p>
<h2 id="如何使用">如何使用</h2>
<p>我原来使用了很久的STM32,熟悉了使用jlink下载的方式,拿到这块板,突然发现不能使用jlink,只能用串口下载的方式,有点懵逼😵.以前接触过串口下载,唯一的感觉就是慢,还不能打断点调试.<br>
官方的手册里介绍了两种方式下载固件.</p>
<ul>
<li>无线烧录器烧录<br>
随开发板附赠了一个无线烧录器,无线烧录器本身运行在AP热点模式.将无线烧录器插在开发板上,连接烧录器发出的wifi,打开烧录器的烧录页面,上传固件更新.这种方式很麻烦,下载一次固件需要2分钟左右.</li>
<li>http_ota更新<br>
当开发板连接上wifi后,可以使用ota更新,自己的电脑上运行一个web服务器,把更新固件放在服务器工作目录里,开发板先把文件下载到download分区,重启后进入bootloader,把download分区中的固件写入app分区里.之后重启,这种方式还可以接受.大概一分钟左右.有几个要注意的点</li>
</ul>
<ol>
<li>不能直接用rtthread.bin升级,首先要使用ota打包工具打包成bootloader可以使用的包.</li>
<li>打包的选项要和图中一致.我之前因为没有使用压缩,导致包太大,无法下载到开发板中,没有使用加密,开发板不接受没有加密过的包.版本号一定要比开发板中运行的固件版本号高,不然无法更新.<br>
<img src="https://baldstudio.cn/post-images/1586832193569.png" alt="" loading="lazy"></li>
</ol>
<h2 id="开发进度">开发进度</h2>
<ul>
<li>开机自动连接wifi<br>
官方提供了wifi的MSH命令,使用方式是&quot;wifi w0 join ssid key&quot;,通过阅读rtthread/comptents/wlan/wlan_cmd.c中的源码,将连接wifi的代码放到了主函数中,实现上电即可连接wifi.</li>
</ul>
<pre><code class="language-c">void wlan_connect(){

    #define wifi_ssid &quot;TP-LINK_1&quot;
    #define wifi_key &quot;jia555555&quot;

    rt_kprintf(&quot;wifi连接中...\r\n&quot;);
    struct rt_wlan_info info;
    int result = 0;

    struct rt_wlan_device *wlan = (struct rt_wlan_device*)rt_device_find(&quot;w0&quot;);

    if(wlan == RT_NULL){
        rt_kprintf(&quot;设备未找到!\r\n&quot;);
    }

    rt_wlan_info_init(&amp;info, WIFI_STATION, SECURITY_WPA2_MIXED_PSK, wifi_ssid);

    result = rt_wlan_init(wlan, WIFI_STATION);

    if (result == RT_EOK)
    {
        result = rt_wlan_connect(wlan, &amp;info, wifi_key);
        if(result == RT_EOK)
        {
            rt_kprintf(&quot;wifi已连接!\r\n&quot;);
        }
        else
        {
            rt_kprintf(&quot;wifi连接失败!\r\n&quot;);
        }
    }
}
</code></pre>
<ul>
<li>图片转base64<br>
本来准备自己实现,后来发现rtt有一个package,叫做tinycrtpt,为嵌入式设备提供了常用的加密方式的加解密.其中就包括了base64.在rtconfig.h中添加宏定义开启tinycrypt后,在主函数中引入头文件&quot;tinycrypt.h&quot;即可使用相关函数.<br>
一张320x240的照片大小是22k左右,于是先要有一个数组缓存照片内容,使用rt_malloc获取24k的unsigned char 数组空间.base64转码完大约需要33k的空间,同样也要使用rt_malloc来获取.我写了一个demo,暂时先将base64结果存入sd卡中.整个转码过程很快,几乎感觉不到耗时.前几次由于接收数组的空间太小,导致程序卡死,仔细研究源码后,确定了合适的数组大小.程序顺利运行.<br>
在进行优化之后,从sd卡中读取图片之后,无需在写入SD卡,而是将结果赋给指针,返回给调用的函数.<br>
更加节省资源,减少时间开销.</li>
</ul>
<pre><code class="language-c">int photo2base64(const char * path,unsigned char * dst)
{
    int fd = open(path,O_RDONLY);
    unsigned char *img = RT_NULL;
    img = (unsigned char *)rt_malloc(sizeof(unsigned char)*1024*24);
    if(img==RT_NULL || dst==RT_NULL)
    {
        rt_kprintf(&quot;内存分配失败\r\n&quot;);
    }
    int res = read(fd, img, 1024*24);
    close(fd);
    rt_kprintf(&quot;res=%d\r\n&quot;,res);
    int len = 1024*40;
    tiny_base64_encode(dst,&amp;len,img,1024*24);
    rt_kprintf(&quot;len=%d\r\n&quot;,len);
    rt_free(img);
    return len;
}
</code></pre>
<ul>
<li>实现GET请求<br>
使用webclient可以实现get请求,可以在终端打印出结果,我在PC上用Python调式的时候,用了几分钟就调通了api接口.可是当我在开发板上进行调用的时候,频频出现问题.因为Python的库封装的太好了,以至于很多细节都是我以前没有考虑过得.踩了很多坑.才把api调通.<br>
我主要的问题是出现在POST请求时的参数格式不对.我一直以为应该是Urlencode(数据头+Base64(图片)),但后来用Fiddler抓包的时候,仔细分析,发现应该是数据头+Urlencode(Base64(图片)),把参数的格式调整正确之后,总算是调通了api</li>
</ul>
<pre><code class="language-c">int base64_test(int argc, char **argv)
{
    char *uri = RT_NULL;
    uri = web_strdup(&quot;http://api.tianapi.com/txapi/imglajifenlei/index&quot;);
    if(uri == RT_NULL)
    {
        rt_kprintf(&quot;no memory for create post request uri buffer.\n&quot;);
        return -RT_ENOMEM;
    }

    unsigned char *dst = (unsigned char *)rt_malloc(sizeof(unsigned char)*1024*40);
    photo2base64(argv[1],dst);

    unsigned char *buffer = (unsigned char *)rt_malloc(sizeof(unsigned char)*1024*40);
    rt_sprintf(buffer,&quot;img=data:image/jpg;base64,%s&quot;,dst);
    memset(dst,0,rt_strlen(dst));   
    URLEncode(buffer, rt_strlen(buffer), dst, 1024*40);
    memset(buffer,0,rt_strlen(buffer));    
    rt_sprintf(buffer,&quot;key=acda67d9ac820ea200a26f73d0b41adf&amp;img=%s&quot;,dst);
    webclient_post_comm(uri, buffer);
    
    web_free(uri);
    rt_free(dst);
    rt_free(buffer);
}
</code></pre>
<ul>
<li>实现语音播报<br>
使用百度的语音合成API,在比较了几家主要的API厂商后,还是决定用百度的,因为他的API调用方便,鉴权简单.容易在单片机上实现.</li>
</ul>
<pre><code class="language-c">int tts_test(int argc, char **argv)
{
    unsigned char *url = RT_NULL;
    unsigned char *text1 = RT_NULL;
    unsigned char *text2 = RT_NULL;
    char *origin = &quot;可回收垃圾,不可回收垃圾,垃圾垃圾都是垃圾&quot;;
    char *token = &quot;24.77fdd5e29e31191ee6c060718b68da99.2592000.1589599990.282335-16279726&quot;;

    text1 = (unsigned char *)rt_malloc(sizeof(unsigned char) * 1024 * 20);

    URLEncode(origin, rt_strlen(origin), text1, 1024 * 20);
    print_base64(text1, rt_strlen(text1));

    text2 = (unsigned char *)rt_malloc(sizeof(unsigned char) * 1024 * 20);
    URLEncode(text1, rt_strlen(text1), text2, 1024 * 20);
    rt_free(text1);
    print_base64(text2, rt_strlen(text2));
    url = (unsigned char *)rt_malloc(sizeof(unsigned char) * 1024 * 30);
    rt_sprintf(url, &quot;http://tsn.baidu.com/text2audio?tok=%s&amp;tex=%s&amp;per=4&amp;spd=5&amp;pit=5&amp;vol=5&amp;aue=3&amp;cuid=123456PYTHON&amp;lan=zh&amp;ctp=1&quot;, token, text2);
    rt_free(text2);
    print_base64(url, rt_strlen(url));
    char *uri = web_strdup(url);
    webclient_get_file(uri, &quot;/sd/audio.mp3&quot;);
    web_free(uri);
    rt_free(url);
    return 0;
}
MSH_CMD_EXPORT(tts_test, tts test);
</code></pre>
<ul>
<li>按下按键拍照,并把照片存储到sd卡<br>
这个实现难度较小,可以参考官方的例子进行简单改动即可.</li>
</ul>
<pre><code class="language-c">int key_photo(int argc, char **argv)
{
    session.event = rt_event_create(&quot;vt_event&quot;, RT_IPC_FLAG_FIFO);
    #define KEY_MID (13)
    rt_pin_mode(KEY_MID, PIN_MODE_INPUT_PULLUP);
    while (1)
    {
        if (rt_pin_read(KEY_MID) == PIN_LOW)
        {
            rt_thread_delay(80);
            if (rt_pin_read(KEY_MID) == PIN_LOW)
            {
                LOG_I(&quot;KEY_MID is pressed&quot;);
                LOG_I(&quot;正在开启摄像头...&quot;);
                camera_start(); //开启摄像头传输照片
                tvideo_capture(1);
                rt_event_recv(session.event, SEND_FRAME_EVENT, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, RT_WAITING_FOREVER, RT_NULL);

                int fd, res;
                rt_sprintf(file_name, &quot;/sd/temp.jpg&quot;, file_count);
                LOG_I(&quot;name = %s \n&quot;, file_name);
                fd = open(file_name, O_WRONLY | O_CREAT);
                if (fd &gt;= 0)
                {
                    write(fd, session.buf, session.total_len);
                    LOG_I(&quot;session.total_len=%d\r\n&quot;, session.total_len);
                    close(fd);
                    LOG_I(&quot;save %s ok!!!\n&quot;, file_name);
                    rt_sem_release(sem_base64);
                    res = Decode_Jpg(file_name);
                    LOG_I(&quot;res = %d\n&quot;, res);
                }
                else
                {
                    LOG_E(&quot;save pic failed!!!\n&quot;);
                }
                tvideo_capture(0);
            }
        }
    }
    return 0;
}
MSH_CMD_EXPORT(key_photo, key photo);
</code></pre>
<h2 id="联合调试">联合调试</h2>
<p>在完成各单项功能之后,我开始将这些功能联合起来调试.从1.0.0不断迭代到1.9.1,经历了90多次迭代,六百多行代码,才把这些功能调通.好在最后所有功能都正常.下面是总的系统框图.<br>
<img src="https://baldstudio.cn/post-images/1587376262709.png" alt="" loading="lazy"></p>
<h2 id="演示效果">演示效果</h2>
<p><video src="../../images/VID20200419195427.mp4"  controls='0' height=auto width=100%> </video></p>
<h2 id="代码地址">代码地址</h2>
<p><a href="https://github.com/jch12138/Garbage-sorting-assistant">垃圾分类助手</a></p>
<h2 id="总结">总结</h2>
<p>通过大约一礼拜的开发,总算是完成了这个项目,如果是在PC上开发,使用高级语言,我想一个下午就能搞定,在嵌入式设备上进行调试费时费力,更加考验你对细节的把握.比如在调用api时,Python里不用关心参数的编码,在c里要自己掌控每个环节.这次使用rtthread,对于内存的使用理解更深了,学会了使用malloc,不再像以前只会使用静态数组了.学会如何节省内存,如何选择内存池.更好的分配内存,提高系统运行效率.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[成功为RT-Thread主线贡献代码😁]]></title>
        <id>https://baldstudio.cn/post/cheng-gong-wei-rt-thread-zhu-xian-gong-xian-dai-ma/</id>
        <link href="https://baldstudio.cn/post/cheng-gong-wei-rt-thread-zhu-xian-gong-xian-dai-ma/">
        </link>
        <updated>2020-04-10T08:01:02.000Z</updated>
        <content type="html"><![CDATA[<p><strong>作者: 蒋晨辉</strong><br>
RT-Thread的FinSH组件提供了适用于嵌入式的类Unix终端,非常好用,但一直以来缺少类似其他平台下的clear命令.无法清空当前屏幕.于是提交了一个PR,为FinSH组件增加clear命令</p>
<h2 id="新增代码">新增代码</h2>
<pre><code class="language-c">long clear(void)
{
    rt_kprintf(&quot;\x1b[2J\x1b[H&quot;);

    return 0;
}
FINSH_FUNCTION_EXPORT(clear,clear the terminal screen);
MSH_CMD_EXPORT(clear,clear the terminal screen);
</code></pre>
<h2 id="使用效果">使用效果</h2>
<figure data-type="image" tabindex="1"><img src="https://baldstudio.cn/post-images/1586505983582.gif" alt="" loading="lazy"></figure>
<h2 id="总结">总结</h2>
<p>总共提了3次PR才过,失败的原因有英文不过关,无法用英文准确表述自己意图,最后使用中文才通过,提交PR时要尽量表述清楚,格式规范,奥利给!</p>
]]></content>
    </entry>
</feed>