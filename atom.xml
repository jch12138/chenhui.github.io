<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://baldstudio.cn</id>
    <title>博德工作室</title>
    <updated>2020-04-14T09:07:15.908Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://baldstudio.cn"/>
    <link rel="self" href="https://baldstudio.cn/atom.xml"/>
    <subtitle>Keep Foolish, Keep Hungry</subtitle>
    <logo>https://baldstudio.cn/images/avatar.png</logo>
    <icon>https://baldstudio.cn/favicon.ico</icon>
    <rights>All rights reserved 2020, 博德工作室</rights>
    <entry>
        <title type="html"><![CDATA[MSP430G2553学习笔记：入门😁]]></title>
        <id>https://baldstudio.cn/post/msp430g2553-xue-xi-bi-ji-ru-men/</id>
        <link href="https://baldstudio.cn/post/msp430g2553-xue-xi-bi-ji-ru-men/">
        </link>
        <updated>2020-04-14T08:59:26.000Z</updated>
        <content type="html"><![CDATA[<p>学校的单片机课程选用了MSP430G2553，上了几节课有了一定的了解，于是就打算简单的来入门一下。</p>
<h3 id="主要部件">主要部件</h3>
<ul>
<li>
<p>MSP430G2553 开发板</p>
</li>
<li>
<p>LCD1602显示器</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://baldstudio.cn/post-images/1586854858163.jpg" alt="" loading="lazy"></figure>
<h3 id="线路连接">线路连接</h3>
<ul>
<li>
<h4 id="查看lcd1602的使用手册的接口说明">查看LCD1602的使用手册的接口说明</h4>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://baldstudio.cn/post-images/1586854867204.jpg" alt="" loading="lazy"></figure>
<ul>
<li>
<h4 id="具体接线">具体接线</h4>
<ul>
<li>该接电源的接电源，该接地的接地</li>
<li>D0~D7  ==&gt;  P2.0~P2.7</li>
<li>VL  ===&gt;  滑动变阻器  ===&gt;  接地</li>
<li>RS  ===&gt;  P1.7</li>
<li>R/W  ==&gt;  P1.6 ，并且将开发板上的P1.6LED的跳线帽拔掉</li>
<li>E  ==&gt;  P1.5</li>
</ul>
</li>
<li>
<h4 id="实物图">实物图</h4>
<p>​	只要接的对，疯狂走线也没有问题😂。由于MSP430工作电压为3.3V，LCD1602的工作电压为5V，这里用了USB转TTL模块给LCD供电。MSP430用USB线供电。❀两开花❀</p>
</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://baldstudio.cn/post-images/1586854881991.jpg" alt="" loading="lazy"></figure>
<h3 id="点亮lcd显示内容">点亮LCD：显示内容</h3>
<p>在LCD上显示东西需要分两个步骤，一个是发送指令（Command），另一个是发送数据（Data）。</p>
<p>指令用于确定显示位置和LCD显示设置。数据就是显示的内容。</p>
<p>第一行显示的位置从0x00开始，第二行从0x40开始，每行16个，多的不显示。</p>
<p><strong>需要注意的是选择显示的位置时，需要额外加上0x80，具体原因和其驱动器有关，这里不深究</strong>。</p>
<p><strong>写指令/数据</strong>代码如下：</p>
<pre><code class="language-c">//**********************************
//       LCD写指令函数
//**********************************
void LCD_writeCmd(unsigned char command)
{
  RS &amp;= ~BIT7;         //设置为指令
  RW &amp;= ~BIT6;         //设置为写操作
  delay_ms(1);
  EN |= BIT5;          //使能端设为高
  P2OUT = command;     //发送指令
  delay_ms(1);
  EN &amp;= ~BIT5;         //关闭使能端
}

//**********************************
//        LCD写数据函数
//**********************************
void LCD_writeData(unsigned char data)
{
  RS |= BIT7;            //设置为数据
  RW &amp;= ~BIT6;           //设置为写操作
  delay_ms(1); 
  EN |= BIT5;            //使能端设为高
  P2OUT = data;          //发送数据
  delay_ms(1);
  EN &amp;= ~BIT5;           //关闭使能端
}
</code></pre>
<p>当然，在使用之前，还要对显示的模式进行设置。</p>
<pre><code class="language-c">//**********************************
//        LCD初始化函数
//**********************************
void LCD_init(void)
{
  RW &amp;= ~BIT6;
  LCD_writeCmd(0x38);  //设置为八线模式，两行显示
  LCD_writeCmd(0x0C);  //00001+(1:开显示；0：关显示)+（1：显示光标；0：不显示光标)+(1:光标闪烁；						  0：不闪烁)
  LCD_writeCmd(0x06);  //000001+(1:光标自动加一；0：光标自动减一)+（1：整屏移动，方向取决于前一							位；0：不移动）
  LCD_writeCmd(0x01);  //数据指针清零，显示清零
  					   //0x02 数据指针清零
}
</code></pre>
<h3 id="定时器计时">定时器：计时</h3>
<p>刚刚入门，还需学习🤦‍，详见 <a href="https://www.ti.com/lit/ug/slau144j/slau144j.pdf">MSP430x2xx Family User's Guide</a> 里的Timer_A。</p>
<p>下面是在SMCLK频率1MHz下，经过10ms触发中断的Timer_A初始化函数。</p>
<pre><code class="language-c">//**********************************
//     TimerA初始化函数
//**********************************
void TIMERA_init()                       
{
  TACTL |= TASSEL_2;  //SMCLK做时钟源
  TACTL |= ID_0;      //不分频
  TACTL |= MC_1;      //增计数模式
  TACTL |= TACLR;     //计数器清零
  TACCR0 = 9999;
  TACCTL0 |= CCIE;    //允许TACCR0中断
}
</code></pre>
<h3 id="最终结果">最终结果</h3>
<p>基于上面的基本知识、用法与函数，最后制作了一个***LCD显示计时器***，后期还会学习新的知识来增加功能。目前的效果如下。<br>
<video src="../../images/zui-zhong.mp4"  controls='0' height=auto width=100%> </video></p>
<h3 id="完整代码">完整代码</h3>
<pre><code class="language-c">  #include &lt;msp430.h&gt;
#include &lt;msp430G2553.h&gt;
  
  #define RS P1OUT  //RS --&gt; P1.7
  #define RW P1OUT  //RW --&gt; P1.6
  #define EN P1OUT  //EN --&gt; P1.5
  #define DATA_PORT P2OUT  //数据、指令 --&gt; P2.0~P2.7
  #define COMMAND_PORT P2OUT
  
  ////预定义函数
  void LCD_init(void); 
  void LCD_writeCmd(unsigned char command);
  void LCD_writeData(unsigned char data);
  void TIMERA_init(void);
  void delay_ms(int t);
  
  char  BALD[]=&quot;BalD STUDIO&quot;;
  char  TimeNum[]= &quot;00:00:00&quot;;
  unsigned int count;
  
  //**********************************
  //      P1中断函数
  //**********************************
  #pragma vector = PORT1_VECTOR
  __interrupt void port1(void)
  {
    delay_ms(2);
    if((P1IN &amp; BIT3)==0){
      unsigned int i;
      for(i=0; i&lt;8; i++)
      {
        if(i==2 || i==5)TimeNum[i]= 0x3A;
        else TimeNum[i]=0x30;
      }
    }
    P1IFG &amp;= ~BIT3;
  }
  
  //**********************************
  //      TimerA0中断函数
  //**********************************
  #pragma vector = TIMER0_A0_VECTOR   //TACCR0的中断向量
  __interrupt void Timer0_A0(void)
  {
    if(count == 100)
    {
      TimeNum[7] += 0x01;  //秒+1
      unsigned int i;
      for(i=0; i&lt;8; i++)   //进位的处理
      {
        switch(i)
        {
        case 0: case 1: case 4: case 7:if(TimeNum[i] == 0x3A){TimeNum[i-1] += 				0x01;TimeNum[i] = 0x30;}
        case 3: if(TimeNum[3] == 0x36){TimeNum[1] += 0x01;TimeNum[3] = 0x30;}
        case 6: if(TimeNum[6] == 0x36){TimeNum[4] += 0x01;TimeNum[6] = 0x30;}
        case 2: case 5: break;
        }
      }
      count = 0;
    }
    else
    {
      count++;
    }
    TACCTL0 &amp;= ~CCIFG;
  }
  
  //**********************************
  //      Main函数
  //**********************************
  void main(void)
  {
    WDTCTL = WDTPW + WDTHOLD; //关闭看门狗
    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    BCSCTL2 = SELM_1 + DIVM_1;
    
    P1SEL = 0x00;    //设置P1口为I/O模式
    P2SEL = 0x00;    //设置P2口为I/O模式
    P1DIR |= 0xFF;   //设置P1口为输出模式
    P2DIR |= 0xFF;   //设置P2口为输出模式
    P1OUT &amp;= 0x00;                  
    P2OUT &amp;= 0x00;
    
    P1DIR &amp;= ~BIT3;  //设置P1.3为输入
    P1REN |= BIT3;   //设置P1.3上拉电阻
    P1OUT |= BIT3;
    P1IES |= BIT3;   //设置下边缘触发
    P1IE |= BIT3;    //允许中断使能
    P1IFG &amp;= ~BIT3;  //关闭中断标志
    
    P1DIR |= BIT0;
    
    _EINT();   //开总中断
    
    TIMERA_init();
    LCD_init();
    
    while(1)
    { 
      P1OUT &amp;= ~BIT0;
      unsigned int i;
      //显示第一行
      LCD_writeCmd(0x80);
      i = 0;
      while(BALD[i] != '\0'){
        LCD_writeData(BALD[i]);
        i++;
      }
      //显示第二行
      LCD_writeCmd(0x80 + 0x40);
      i = 0;
      while(TimeNum[i] != '\0'){
        LCD_writeData(TimeNum[i]);
        i++;
      }
    }
  }
  
  //**********************************
  //     TimerA初始化函数
  //**********************************
  void TIMERA_init()                       
  {
    TACTL |= TASSEL_2;  //SMCLK做时钟源
    TACTL |= ID_0;      //不分频
    TACTL |= MC_1;      //增计数模式
    TACTL |= TACLR;     //计数器清零
    TACCR0 = 9999;
    TACCTL0 |= CCIE;    //允许TACCR0中断
  }
  
  //**********************************
  //       LCD写指令函数
  //**********************************
  void LCD_writeCmd(unsigned char command)
  {
    RS &amp;= ~BIT7;
    RW &amp;= ~BIT6;
    delay_ms(1);
    EN |= BIT5;
    P2OUT = command;
    delay_ms(1);
    EN &amp;= ~BIT5;
  }
  
  //**********************************
  //        LCD写数据函数
  //**********************************
  void LCD_writeData(unsigned char data)
  {
    RS |= BIT7;
    RW &amp;= ~BIT6;
    delay_ms(1);
    EN |= BIT5;
    P2OUT = data;
    delay_ms(1);
    EN &amp;= ~BIT5;
  }
  
  //**********************************
  //        LCD初始化函数
  //**********************************
  void LCD_init(void)
  {
    RW &amp;= ~BIT6;
    LCD_writeCmd(0x38);  //设置为八线模式，两行显示
    LCD_writeCmd(0x0C);  //00001+(1:开显示；0：关显示)+（1：显示光标；0：不显示光标)+(1:光标闪烁；0：不闪烁)
    LCD_writeCmd(0x06);  //指针自动增加一位
    LCD_writeCmd(0x01);  //清屏
  }
  
  //**********************************
  //      延时函数
  //**********************************
  void delay_ms(int t)
  {
    unsigned int i;
    for(i=0; i&lt;t; i++)
    {
      __delay_cycles(1000);
    }
  }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[麻雀一号]垃圾分类助手开发历程]]></title>
        <id>https://baldstudio.cn/post/ma-que-yi-hao-la-ji-fen-lei-zhu-shou-kai-fa-li-cheng/</id>
        <link href="https://baldstudio.cn/post/ma-que-yi-hao-la-ji-fen-lei-zhu-shou-kai-fa-li-cheng/">
        </link>
        <updated>2020-04-13T14:49:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简单介绍">简单介绍</h2>
<p>最近参加了RT-Thread应用创新设计大赛,可以白嫖开发板,拿名次还有奖金,抱着刷履历和白嫖开发板的心情,我报了这个比赛.项目最终定为垃圾分类助手,大致功能是按下按键,摄像头拍照,将照片发送到云端进行识别,云端会把识别结果转成语音,返回给开发板,然后开发板播放识别结果.<br>
我申请的是麻雀一号开发板,下面简单介绍一下这块开发板<br>
<img src="https://baldstudio.cn/post-images/1586789929216.jpg" alt="" loading="lazy"></p>
<blockquote>
<p>麻雀一号开发板采用的主控芯片是 BK7252 , 是一款高性能 WiFi 模块，采用高集成的无线射频芯片,内部集成 2.4GHz Wi-Fi 1T1R 先进技术，支持摄像头图像输出，拥有最佳的功耗性能、射频性能、稳定性、通用性和可靠性，适用于各种应用和不同产品需求。模块内部拥有 512KB 内嵌 RAM 和 4Mbyte Flash 空间， CPU 主频高达 180Mhz。并且集成了天线开关、功率放大器、低噪放大器、过滤器、电源管理模块, 支持 802.11e 以及 WMM-PS 协议, 支持 WPA、 WPA2 和 WAPI 安全协议，同时集成了蓝牙 BLE 收发器，支持 BLE4.2，支持主机或从机模式。</p>
</blockquote>
<p>官方提供的sdk是基于RT-Thread v3.0.1的,版本有点老,略微有点让人有点不爽,想自己适配最新版,可是报了好多错,还是先老老实实用官方的吧😂.<br>
<img src="https://baldstudio.cn/post-images/1586790191438.png" alt="" loading="lazy"><br>
体验了一下子之后,发现官方sdk的功能已经很完善了,基本把这块板上所有资源都用到了.但是依然有点遗憾,官方的menuconfig没有适配好.早期适配了一下之后,就都在直接改&lt;rtconfig.h&gt;.导致一旦使用menuconfig后,会缺少大量宏定义导致编译失败.</p>
<h2 id="如何使用">如何使用</h2>
<p>我原来使用了很久的STM32,熟悉了使用jlink下载的方式,拿到这块板,突然发现不能使用jlink,只能用串口下载的方式,有点懵逼😵.以前接触过串口下载,唯一的感觉就是慢,还不能打断点调试.<br>
官方的手册里介绍了两种方式下载固件.</p>
<ul>
<li>无线烧录器烧录<br>
随开发板附赠了一个无线烧录器,无线烧录器本身运行在AP热点模式.将无线烧录器插在开发板上,连接烧录器发出的wifi,打开烧录器的烧录页面,上传固件更新.这种方式很麻烦,下载一次固件需要2分钟左右.</li>
<li>http_ota更新<br>
当开发板连接上wifi后,可以使用ota更新,自己的电脑上运行一个web服务器,把更新固件放在服务器工作目录里,开发板先把文件下载到download分区,重启后进入bootloader,把download分区中的固件写入app分区里.之后重启,这种方式还可以接受.大概一分钟左右.有几个要注意的点</li>
</ul>
<ol>
<li>不能直接用rtthread.bin升级,首先要使用ota打包工具打包成bootloader可以使用的包.</li>
<li>打包的选项要和图中一致.我之前因为没有使用压缩,导致包太大,无法下载到开发板中,没有使用加密,开发板不接受没有加密过的包.版本号一定要比开发板中运行的固件版本号高,不然无法更新.<br>
<img src="https://baldstudio.cn/post-images/1586832193569.png" alt="" loading="lazy"></li>
</ol>
<h2 id="开发进度">开发进度</h2>
<ul>
<li>开机自动连接wifi<br>
官方提供了wifi的MSH命令,使用方式是&quot;wifi w0 join ssid key&quot;,通过阅读rtthread/comptents/wlan/wlan_cmd.c中的源码,将连接wifi的代码放到了主函数中,实现上电即可连接wifi.</li>
</ul>
<pre><code class="language-c">void wlan_connect(){

    #define wifi_ssid &quot;TP-LINK_1&quot;
    #define wifi_key &quot;jia555555&quot;

    rt_kprintf(&quot;wifi连接中...\r\n&quot;);
    struct rt_wlan_info info;
    int result = 0;

    struct rt_wlan_device *wlan = (struct rt_wlan_device*)rt_device_find(&quot;w0&quot;);

    if(wlan == RT_NULL){
        rt_kprintf(&quot;设备未找到!\r\n&quot;);
    }

    rt_wlan_info_init(&amp;info, WIFI_STATION, SECURITY_WPA2_MIXED_PSK, wifi_ssid);

    result = rt_wlan_init(wlan, WIFI_STATION);

    if (result == RT_EOK)
    {
        result = rt_wlan_connect(wlan, &amp;info, wifi_key);
        if(result == RT_EOK)
        {
            rt_kprintf(&quot;wifi已连接!\r\n&quot;);
        }
        else
        {
            rt_kprintf(&quot;wifi连接失败!\r\n&quot;);
        }
    }
}
</code></pre>
<ul>
<li>图片转base64<br>
本来准备自己实现,后来发现rtt有一个package,叫做tinycrtpt,为嵌入式设备提供了常用的加密方式的加解密.其中就包括了base64.在rtconfig.h中添加宏定义开启tinycrypt后,在主函数中引入头文件&quot;tinycrypt.h&quot;即可使用相关函数.<br>
一张320x240的照片大小是22k左右,于是先要有一个数组缓存照片内容,使用rt_malloc获取24k的unsigned char 数组空间.base64转码完大约需要33k的空间,同样也要使用rt_malloc来获取.我写了一个demo,暂时先将base64结果存入sd卡中.整个转码过程很快,几乎感觉不到耗时.前几次由于接收数组的空间太小,导致程序卡死,仔细研究源码后,确定了合适的数组大小.程序顺利运行.</li>
</ul>
<pre><code class="language-c">unsigned char *photo2base64(void)
{
    int fd = open(&quot;/sd/temp.jpg&quot;,O_RDONLY);
    unsigned char *img = RT_NULL;
    unsigned char *dst = RT_NULL;
    img = (unsigned char *)rt_malloc(sizeof(unsigned char)*1024*24);
    dst = (unsigned char *)rt_malloc(sizeof(unsigned char)*1024*50);
    if(img==RT_NULL || dst==RT_NULL)
    {
        rt_kprintf(&quot;内存分配失败\r\n&quot;);
    }
    int res = read(fd, img, 1024*24);
    close(fd);
    rt_kprintf(&quot;res=%d\r\n&quot;,res);
    int len = 1024*40;
    tiny_base64_encode(dst,&amp;len,img,1024*24);
    rt_kprintf(&quot;len=%d\r\n&quot;,len);
    fd = open(&quot;/sd/base64.txt&quot;,O_WRONLY|O_CREAT);
    res = write(fd,dst,len);
    rt_kprintf(&quot;res = %d\r\n&quot;,res);
    close(fd);
    rt_kprintf(dst);
    rt_free(img);
    rt_free(dst);

}
</code></pre>
<ul>
<li>实现GET请求<br>
使用webclient可以实现get请求,可以在终端打印出结果,由于在嵌入式中进行网络请求依然比较麻烦,所以我决定在自己的服务器上对两个api做二次封装.只要开发板网服务器发送图片数据,服务器会先调用垃圾分类api获取分类信息,然后调用语音合成api,生成语音文件,返回给开发板.这样开发板只需做一次请求,简化了开发板端的工作量.</li>
</ul>
<pre><code class="language-c">int get_garbage_info(void)
{
    #define HTTP_GET_URL &quot;http://api.tianapi.com/txapi/imglajifenlei/index&quot;
    #define HEADER &quot;Content-Type: application/x-www-form-urlencoded&quot;
    char *payload = &quot;key=acda67d9ac820ea200a26f73d0b41adf&quot;;
    unsigned char *buffer = RT_NULL;

    int length = 0;

    length = webclient_request(HTTP_GET_URL, HEADER, payload, &amp;buffer);

    if (length &lt; 0)
    {
        rt_kprintf(&quot;webclient GET request response data error.\r\n&quot;);
        return -RT_ERROR;
    }

    rt_kprintf(&quot;webclient GET request response data :\r\n&quot;);
    rt_kprintf(&quot;%s\r\n&quot;,buffer);

    web_free(buffer);
    return RT_EOK;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[成功为RT-Thread主线贡献代码😁]]></title>
        <id>https://baldstudio.cn/post/cheng-gong-wei-rt-thread-zhu-xian-gong-xian-dai-ma/</id>
        <link href="https://baldstudio.cn/post/cheng-gong-wei-rt-thread-zhu-xian-gong-xian-dai-ma/">
        </link>
        <updated>2020-04-10T08:01:02.000Z</updated>
        <content type="html"><![CDATA[<p>RT-Thread的FinSH组件提供了适用于嵌入式的类Unix终端,非常好用,但一直以来缺少类似其他平台下的clear命令.无法清空当前屏幕.于是提交了一个PR,为FinSH组件增加clear命令</p>
<h2 id="新增代码">新增代码</h2>
<pre><code class="language-c">long clear(void)
{
    rt_kprintf(&quot;\x1b[2J\x1b[H&quot;);

    return 0;
}
FINSH_FUNCTION_EXPORT(clear,clear the terminal screen);
MSH_CMD_EXPORT(clear,clear the terminal screen);
</code></pre>
<h2 id="使用效果">使用效果</h2>
<figure data-type="image" tabindex="1"><img src="https://baldstudio.cn/post-images/1586505983582.gif" alt="" loading="lazy"></figure>
<h2 id="总结">总结</h2>
<p>总共提了3次PR才过,失败的原因有英文不过关,无法用英文准确表述自己意图,最后使用中文才通过,提交PR时要尽量表述清楚,格式规范,奥利给!</p>
]]></content>
    </entry>
</feed>